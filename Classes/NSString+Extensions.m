////  NSString+Extensions.m//  Smart Wallet////  Created by MAC8 on 4/21/11.//  Copyright 2011 __MyCompanyName__. All rights reserved.//#import "NSString+Extensions.h"@implementation NSString (Extensions)- (NSString *)documentsDirectoryPath {	NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);	NSString *documentsDirectory = [paths objectAtIndex:0];		return documentsDirectory;}-(NSString *)cacheDirectoryPath{	NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);	NSString *cacheDirectory = [paths objectAtIndex:0];		return cacheDirectory;}-(NSString *)pathInCacheDirectory{	NSString *cacheDirectory = [self cacheDirectoryPath];	NSString *path = [cacheDirectory stringByAppendingPathComponent:self];		return path;}- (NSString *)pathInDocumentDirectory {	NSString *documentsDirectory = [self documentsDirectoryPath];	NSString *path = [documentsDirectory stringByAppendingPathComponent:self];		return path;}- (NSString *)pathInDirectory:(NSString *)dir {	NSString *documentsDirectory = [self documentsDirectoryPath];	NSString *dirPath = [documentsDirectory stringByAppendingString:dir];	NSString *path = [dirPath stringByAppendingString:self];		NSFileManager *manager = [NSFileManager defaultManager];	[manager createDirectoryAtPath:path withIntermediateDirectories:YES attributes:nil error:nil];		return path;}- (NSString *)removeWhiteSpace {	return [self stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];}- (NSString*)stringByNormalizingCharacterInSet:(NSCharacterSet*)characterSet withString:(NSString*)replacement {	NSMutableString* result = [NSMutableString string];	NSScanner* scanner = [NSScanner scannerWithString:self];	while (![scanner isAtEnd]) {		if ([scanner scanCharactersFromSet:characterSet intoString:NULL]) {			[result appendString:replacement];		}		NSString* stringPart = nil;		if ([scanner scanUpToCharactersFromSet:characterSet intoString:&stringPart]) {			[result appendString:stringPart];		}	}		return [[result copy] autorelease];}- (NSString *)bindSQLCharacters {	NSString *bindString = self;		bindString = [bindString stringByReplacingOccurrencesOfString:@"'" withString:@"''"];		return bindString;}-(NSString *)NSFormatDateOfType:(NSString *)fileType{	NSDateFormatter *dateFormatter = [[[NSDateFormatter alloc] init] autorelease];	[dateFormatter setDateFormat:@"yyyy-MM-dd_HH-mm-ss"];	NSString *file = [NSString stringWithFormat:@"%@_%@.%@",self,[dateFormatter stringFromDate:[NSDate date]],fileType];		return file;}-(NSString *)createCacheDirectory{	NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);	NSString *cacheDirectory = [paths objectAtIndex:0];	NSString *cachePath = [NSString stringWithFormat:@"%@/%@",cacheDirectory,self];		NSFileManager *manager = [NSFileManager defaultManager];	[manager createDirectoryAtPath:cachePath withIntermediateDirectories:YES attributes:nil error:nil];		return cachePath;}/*-(NSError*)removeItemInCache:(NSString *)fileOrDir{	NSString *path =[self pathInCacheDirectory];	NSError *error;	NSFileManager *manager = [NSFileManager defaultManager];	[manager removeItemAtPath:path error:&error];	}*/@end